
```html
<style>
/* Quick Tour Section Styles */
.quick-tour-section {
    padding: 80px 0;
    background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);
    min-height: 100vh;
    display: flex;
    align-items: center;
    position: relative;
    overflow: hidden;
}

.quick-tour-section .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
    width: 100%;
}

.section-title {
    font-family: 'Big Shoulders Display', cursive;
    font-size: 3rem;
    font-weight: 700;
    color: #FF6B6B;
    text-align: center;
    margin-bottom: 60px;
    text-transform: uppercase;
    letter-spacing: 2px;
}

.cards-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    position: relative;
}

.card-stack {
    position: relative;
    width: 400px;
    height: 300px;
    margin-bottom: 40px;
}

.tour-card {
    position: absolute;
    width: 350px;
    height: 200px;
    background: rgba(255, 255, 255, 0.08);
    border: 1px solid rgba(255, 255, 255, 0.15);
    border-radius: 15px;
    padding: 25px;
    color: white;
    backdrop-filter: blur(10px);
    cursor: pointer;
    transition: all 0.8s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    transform: translateX(-400px);
    opacity: 0;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
}

.tour-card.animate-in {
    transform: translateX(0);
    opacity: 1;
}

.tour-card:nth-child(1) {
    top: 0;
    left: 0;
    z-index: 5;
    transform: translateX(-400px) rotate(-2deg);
}

.tour-card:nth-child(1).animate-in {
    transform: translateX(0) rotate(-2deg);
}

.tour-card:nth-child(2) {
    top: 10px;
    left: 20px;
    z-index: 4;
    transform: translateX(-400px) rotate(1deg);
}

.tour-card:nth-child(2).animate-in {
    transform: translateX(20px) rotate(1deg);
}

.tour-card:nth-child(3) {
    top: 20px;
    left: 40px;
    z-index: 3;
    transform: translateX(-400px) rotate(-1deg);
}

.tour-card:nth-child(3).animate-in {
    transform: translateX(40px) rotate(-1deg);
}

.tour-card:nth-child(4) {
    top: 30px;
    left: 60px;
    z-index: 2;
    transform: translateX(-400px) rotate(2deg);
}

.tour-card:nth-child(4).animate-in {
    transform: translateX(60px) rotate(2deg);
}

.tour-card:nth-child(5) {
    top: 40px;
    left: 80px;
    z-index: 1;
    transform: translateX(-400px) rotate(-1deg);
}

.tour-card:nth-child(5).animate-in {
    transform: translateX(80px) rotate(-1deg);
}

.tour-card:hover {
    transform: translateX(var(--hover-x, 0)) translateY(-5px) rotate(var(--hover-rotation, 0deg)) scale(1.02);
    box-shadow: 0 15px 35px rgba(255, 107, 107, 0.3);
    border-color: rgba(255, 107, 107, 0.5);
}

.card-icon {
    font-size: 2rem;
    margin-bottom: 15px;
    color: #FF6B6B;
}

.card-title {
    font-family: 'Big Shoulders Display', cursive;
    font-size: 1.5rem;
    font-weight: 700;
    margin-bottom: 10px;
    color: #FF6B6B;
}

.card-description {
    font-family: 'Inter', sans-serif;
    line-height: 1.5;
    opacity: 0.9;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    margin-bottom: 15px;
}

.card-cta {
    background: #FF6B6B;
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 25px;
    font-family: 'Inter', sans-serif;
    font-size: 0.9rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    opacity: 0;
    transform: translateY(10px);
    position: absolute;
    bottom: 20px;
    left: 25px;
}

.card-cta:hover {
    background: #ff5252;
    transform: translateY(8px) scale(1.05);
}

.tour-card.focused {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(1.1);
    z-index: 1000;
    width: 400px;
    height: 280px;
    box-shadow: 0 25px 50px rgba(255, 107, 107, 0.4);
    border-color: #FF6B6B;
}

.tour-card.focused .card-cta {
    opacity: 1;
    transform: translateY(0);
}

.blur-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
    backdrop-filter: blur(5px);
    z-index: 999;
    opacity: 0;
    pointer-events: none;
    transition: all 0.3s ease;
}

.blur-overlay.active {
    opacity: 1;
    pointer-events: all;
}

.shuffle-button {
    background: linear-gradient(45deg, #FF6B6B, #ff5252);
    color: white;
    border: none;
    padding: 12px 30px;
    border-radius: 30px;
    font-family: 'Inter', sans-serif;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 5px 15px rgba(255, 107, 107, 0.3);
}

.shuffle-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(255, 107, 107, 0.4);
}

.shuffle-button:active {
    transform: translateY(0);
}

.shuffling .tour-card {
    transition: all 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55);
}

@media (max-width: 768px) {
    .card-stack {
        width: 300px;
        height: 250px;
    }

    .tour-card {
        width: 280px;
        height: 160px;
        padding: 20px;
    }

    .tour-card.focused {
        width: 320px;
        height: 220px;
    }

    .section-title {
        font-size: 2.5rem;
    }
}
</style>

<!-- Quick Tour Section -->
<section id="quick-tour" class="quick-tour-section">
    <div class="container">
        <h2 class="section-title">Quick Tour</h2>
        <div class="cards-container">
            <div class="card-stack">
                <!-- About Me Card -->
                <div class="tour-card" data-card="about-me">
                    <div class="card-icon">üë§</div>
                    <h3 class="card-title">About Me</h3>
                    <p class="card-description">Meet the person behind the campaigns, my lens, my stories, and my creative approach.</p>
                    <button class="card-cta">Explore About Me</button>
                </div>
                
                <!-- Brand Guide Sub-card -->
                <div class="tour-card sub-card" data-card="brand-guide">
                    <div class="card-icon">üé®</div>
                    <h3 class="card-title">Brand Guide</h3>
                    <p class="card-description">Visual identity that represents my creative process.</p>
                    <button class="card-cta">View Brand Guide</button>
                </div>
                
                <!-- Timeline Card -->
                <div class="tour-card" data-card="timeline">
                    <div class="card-icon">üïê</div>
                    <h3 class="card-title">Timeline</h3>
                    <p class="card-description">A horizontal showcase of the eras that shaped my career journey.</p>
                    <button class="card-cta">See Timeline</button>
                </div>
                
                <!-- My Experience Card -->
                <div class="tour-card" data-card="my-experience">
                    <div class="card-icon">üìà</div>
                    <h3 class="card-title">My Experience</h3>
                    <p class="card-description">A distilled snapshot of my 13+ years at Microsoft and what I learned.</p>
                    <button class="card-cta">View Experience</button>
                </div>
                
                <!-- Resume Sub-card -->
                <div class="tour-card sub-card" data-card="resume">
                    <div class="card-icon">üìÑ</div>
                    <h3 class="card-title">Resume</h3>
                    <p class="card-description">The formal breakdown of skills, achievements, and career highlights.</p>
                    <button class="card-cta">Download Resume</button>
                </div>
            </div>
            
            <button class="shuffle-button">Shuffle Cards</button>
        </div>
    </div>
    
    <div class="blur-overlay"></div>
</section>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const cards = document.querySelectorAll('.tour-card');
    const shuffleButton = document.querySelector('.shuffle-button');
    const blurOverlay = document.querySelector('.blur-overlay');
    const cardStack = document.querySelector('.card-stack');
    let focusedCard = null;

    // Entrance animation
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                cards.forEach((card, index) => {
                    setTimeout(() => {
                        card.classList.add('animate-in');
                        // Set hover variables
                        card.style.setProperty('--hover-x', card.style.transform.match(/translateX\(([^)]+)\)/)?.[1] || '0');
                        card.style.setProperty('--hover-rotation', card.style.transform.match(/rotate\(([^)]+)\)/)?.[1] || '0deg');
                    }, index * 400);
                });
                observer.unobserve(entry.target);
            }
        });
    }, { threshold: 0.3 });

    if (cardStack) {
        observer.observe(cardStack);
    }

    // Card click functionality
    cards.forEach(card => {
        card.addEventListener('click', function(e) {
            e.stopPropagation();
            
            if (focusedCard && focusedCard !== this) {
                // Remove focus from previous card
                focusedCard.classList.remove('focused');
            }
            
            if (this.classList.contains('focused')) {
                // Unfocus current card
                this.classList.remove('focused');
                blurOverlay.classList.remove('active');
                focusedCard = null;
            } else {
                // Focus this card
                this.classList.add('focused');
                blurOverlay.classList.add('active');
                focusedCard = this;
            }
        });
    });

    // Click outside to unfocus
    blurOverlay.addEventListener('click', function() {
        if (focusedCard) {
            focusedCard.classList.remove('focused');
            blurOverlay.classList.remove('active');
            focusedCard = null;
        }
    });

    // Shuffle functionality
    shuffleButton.addEventListener('click', function() {
        cardStack.classList.add('shuffling');
        
        // Create array of positions
        const positions = [
            { top: 0, left: 0, rotation: -2, zIndex: 5 },
            { top: 10, left: 20, rotation: 1, zIndex: 4 },
            { top: 20, left: 40, rotation: -1, zIndex: 3 },
            { top: 30, left: 60, rotation: 2, zIndex: 2 },
            { top: 40, left: 80, rotation: -1, zIndex: 1 }
        ];

        // Shuffle positions
        const shuffledPositions = [...positions].sort(() => Math.random() - 0.5);

        // Apply new positions
        cards.forEach((card, index) => {
            const pos = shuffledPositions[index];
            card.style.transform = `translateX(${pos.left}px) translateY(${pos.top}px) rotate(${pos.rotation}deg)`;
            card.style.zIndex = pos.zIndex;
            card.style.setProperty('--hover-x', `${pos.left}px`);
            card.style.setProperty('--hover-rotation', `${pos.rotation}deg`);
        });

        // Remove shuffling class after animation
        setTimeout(() => {
            cardStack.classList.remove('shuffling');
        }, 600);
    });

    // CTA button functionality
    document.querySelectorAll('.card-cta').forEach(button => {
        button.addEventListener('click', function(e) {
            e.stopPropagation();
            const cardType = this.closest('.tour-card').getAttribute('data-card');
            
            // Handle navigation based on card type
            switch(cardType) {
                case 'about-me':
                    window.location.href = 'about.html';
                    break;
                case 'brand-guide':
                    window.location.href = 'brand-guide.html';
                    break;
                case 'timeline':
                    window.location.href = 'timeline.html';
                    break;
                case 'my-experience':
                    window.location.href = 'myexperience.html';
                    break;
                case 'resume':
                    window.location.href = 'cv.html';
                    break;
                default:
                    console.log('Navigate to:', cardType);
            }
        });
    });
});
</script>
```

**That's it! This will create the exact stacked card animation we designed.**

---